generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// RESTAURANT & TENANT MODELS (Phase 1 + Phase 2 ready)
// ============================================================================

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  email       String   @unique
  phone       String
  address     String
  description String?
  logo        String?
  settings    Json     @default("{}")
  theme       Json     @default("{}")
  plan        SubscriptionPlan @default(FREE)
  status      RestaurantStatus @default(ACTIVE)
  customDomain String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  menuItems   MenuItem[]
  orders      Order[]
  customers   Customer[]
  reviews     Review[]
  promoCodes  PromoCode[]
  analytics   Analytics[]
  
  @@map("restaurants")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  avatar       String?
  password     String?
  role         UserRole  @default(ADMIN)
  permissions  Json      @default("[]")
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  emailVerified DateTime?
  lastLoginAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  @@map("users")
}

model Customer {
  id           String   @id @default(cuid())
  email        String
  name         String
  phone        String?
  address      String?
  preferences  Json     @default("{}")
  loyaltyPoints Int     @default(0)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders       Order[]
  reviews      Review[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@unique([email, restaurantId])
  @@map("customers")
}

model MenuItem {
  id           String     @id @default(cuid())
  name         String
  description  String
  price        Decimal    @db.Decimal(10, 2)
  category     String
  subcategory  String?
  image        String?
  images       Json       @default("[]")
  isAvailable  Boolean    @default(true)
  isVegan      Boolean    @default(false)
  isVegetarian Boolean    @default(false)
  isGlutenFree Boolean    @default(false)
  isSpicy      Boolean    @default(false)
  isPopular    Boolean    @default(false)
  isFeatured   Boolean    @default(false)
  calories     Int?
  allergens    Json       @default("[]")
  ingredients  Json       @default("[]")
  stockCount   Int?
  lowStockAlert Int?
  sortOrder    Int        @default(0)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  @@map("menu_items")
}

// ============================================================================
// ====== FIXED ORDER MODEL, ONLY APPEARS ONCE, WITH CORRECT @@map("orders") ==
// ============================================================================

model Order {
  id             String        @id @default(cuid())
  orderNumber    String        @unique
  status         OrderStatus   @default(PENDING)
  type           OrderType     @default(DELIVERY)
  priority       OrderPriority @default(NORMAL)
  subtotal       Decimal       @db.Decimal(10, 2)
  taxAmount      Decimal       @default(0) @db.Decimal(10, 2)
  deliveryFee    Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount Decimal       @default(0) @db.Decimal(10, 2)
  total          Decimal       @db.Decimal(10, 2)

  customerId     String?
  customer       Customer?     @relation(fields: [customerId], references: [id])
  customerInfo   Json

  deliveryAddress Json?
  pickupTime      DateTime?
  deliveryTime    DateTime?
  estimatedTime   DateTime?

  notes           String?
  kitchenNotes    String?

  paymentId       String?
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  promoCodeId     String?
  promoCode       PromoCode?    @relation(fields: [promoCodeId], references: [id])

  restaurantId    String
  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  items           OrderItem[]

  response        String?
  respondedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  completedAt     DateTime?

  // For linking review/order feedback
  reviews         Review[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  customizations Json  @default("{}")
  notes      String?
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  createdAt  DateTime @default(now())
  @@map("order_items")
}

model PromoCode {
  id           String      @id @default(cuid())
  code         String      @unique
  name         String
  description  String?
  type         DiscountType
  value        Decimal     @db.Decimal(10, 2)
  minOrderAmount Decimal?  @db.Decimal(10, 2)
  maxDiscountAmount Decimal? @db.Decimal(10, 2)
  maxUses      Int?
  maxUsesPerCustomer Int?
  currentUses  Int         @default(0)
  validFrom    DateTime
  validUntil   DateTime
  isActive     Boolean     @default(true)
  applicableCategories Json @default("[]")
  applicableItems     Json  @default("[]")
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders       Order[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  @@map("promo_codes")
}

// ============================================================================
// ====== FIXED, FULLY TERMINATED REVIEW MODEL ================================
// ============================================================================

model Review {
  id           String      @id @default(cuid())
  rating       Int         // 1-5 stars
  title        String?
  comment      String
  status       ReviewStatus @default(PENDING)
  moderatedBy  String?
  moderatedAt  DateTime?
  customerId   String
  customer     Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderId      String?
  order        Order?      @relation(fields: [orderId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  @@map("reviews")
}

// ============================================================================
// Everything else below is left as-is from your draft (Analytics, AuditLog, etc.)
// ============================================================================

model Analytics {
  id           String      @id @default(cuid())
  date         DateTime    @db.Date
  revenue      Decimal     @db.Decimal(10, 2)
  orderCount   Int
  avgOrderValue Decimal    @db.Decimal(10, 2)
  newCustomers Int
  returningCustomers Int
  popularItems Json        @default("[]")
  hourlyData   Json        @default("{}")
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  @@unique([restaurantId, date])
  @@map("analytics")
}

model AuditLog {
  id           String      @id @default(cuid())
  action       String
  entityType   String
  entityId     String
  oldValues    Json?
  newValues    Json?
  userId       String?
  userEmail    String?
  restaurantId String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime    @default(now())
  @@map("audit_logs")
}

// ======================= ENUMS (unchanged) ======================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  STAFF
  CUSTOMER
}

enum RestaurantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderType {
  DELIVERY
  PICKUP
  DINE_IN
}

enum OrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIAL_REFUND
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_DELIVERY
  BUY_X_GET_Y
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  HIDDEN
}